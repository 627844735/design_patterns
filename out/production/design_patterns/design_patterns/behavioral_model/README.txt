该包中主要介绍 <行为型> 设计模式.
    行为模式关注的是：各个类之间的相互作用,将职责划分清楚,使我们的代码更加的清晰.

    1.<strategy> :策略模式.
        同 [桥梁模式] 少了左层的抽象.  且没有桥梁模式那么解耦. 建议使用桥梁模式.

    2.<observer> :观察模式.
        1.需要有一个 观察者[OBServer]订阅的 主题[某个对象 Subject] 以及 当主题有数据变化时通知观察者. [某个属性变化.]

        2.<AbstractSubject> ：主题的抽象类. 其中包含 {观察者列表/注册观察者方法/通知观察者方法}  当主题的某个值发生变动的时候,即可通知所有的主题来进行后续代码的执行.
          <AbstractOBServer> : 观察者抽象类. 其中有一个AbstractSubject属性. 来进行后续观察者的操作.

        3.在生产中,观察者多数用消息中间件来替代.


    3.<chain_of_responsibility> :责任链模式.



    4.<template> 模版方法模式.



    5.<state> 状态模式